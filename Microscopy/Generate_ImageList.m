function Generate_ImageList(isCorrectionDesired)

% Generates a list of the (optionally image-corrected) IF images to be
% used for downstream analysis. If image correction is requested, the
% correction model for the image is generated by this function.
% INPUT
% isCorrectionDesired - is a boolean variable which determines if image correction
%                       should be applied to the image
% OUTPUT
% The resultant image list is stored as a struct in the file specified by
% params.microscopy.bgSubtractedImgList.The struct has fields:
%
% scaledImageList -  (if correction is applied) a cell array of size {4x36}
%                    with rows corresponding to the different marker sets,
%                    and the columns corresponding to the samples. Each
%                    element of the cell is a 3X1 TissueImageCorrected
%                    decriptor of the background corrected image
%                    corresponding to the 3 replicate images per sample-markerSet combo.
% rawImageList    -  (if correction is not applied) identical in format to
%                    scaledImageList, except image correction is not
%                    applied to the images and they are described by
%                    TissueImage objects.
% sectionNumber   -  Contains the physical section numbers for the images in
%                    scaledImageList or rawImageList. Accordingly it is a
%                    {4x36} cell, with each element containing a [3x1]
%                    array with the section numbers for the replicate sections e.g. [7,17,27]
%



params=GetParams({'microscopy','samples'});
numberOfMarkerSets=length(params.microscopy.markerSets);
numberOfMarkersPerSet=length(params.microscopy.markerSets{1});
numberOfReplicates=3;% Number of replicate slides per sample-markerSet combo
numberOfSamples=params.samples.numberOfSamples;

% Image correction parameters
referenceDapiExposure=params.microscopy.referenceDapiExposure;
scalingPctiles=params.microscopy.scalingPctiles;

scaledImageList=cell(numberOfMarkerSets,numberOfSamples);
rawImageList=cell(numberOfMarkerSets,numberOfSamples);
sectionNumbers=cell(numberOfMarkerSets,numberOfSamples);
% loop over marker sets
for markerSet=1:numberOfMarkerSets
    % loop over sample numbers
    parfor sampleNumber=1:numberOfSamples
        
        % load replicate images
        [afiFiles,info]=GetImages('IF','sampleNumber',sampleNumber,...
            'dataLocation','ForLeidos','MarkerSet',markerSet);
        [info,order]=sortrows(info,'sectionNumber');
        sectionNumbers{markerSet,sampleNumber}=info.sectionNumber;
        afiFiles=afiFiles(order);
        
        if(length(afiFiles)~=numberOfReplicates)
            error('Missing or extra files!');
        end
        fileInfo=cell(numberOfReplicates,numberOfMarkersPerSet);
        for f=1:numberOfReplicates
            [fP,~]=fileparts(afiFiles{f});
            files=ReadAfiFilenames(afiFiles{f});
            for markerCounter=1:numberOfMarkersPerSet
                fileInfo{f,markerCounter}=GetImagingInfo(fullfile(fP,files{markerCounter}));
            end
        end
        exposure=cellfun(@(x) x.ExposureTime,fileInfo);
        
        % rescale for dna channel
        dnaScaleFactors=exposure(:,1)/referenceDapiExposure;
        
        % loop over replicates and channels,  find distributions
        
        
        tImgListRaw=cell(numberOfReplicates,1);
        tImgListClean=cell(numberOfReplicates,1);
        
        
        
        pctileVals=zeros(numberOfReplicates,numberOfMarkersPerSet,length(scalingPctiles));
        tumorMasks=cell(numberOfReplicates,1);
        tumorPixelRegions=cell(numberOfReplicates,1);
        for fileCounter=1:numberOfReplicates
            %sectionNumber=info.sectionNumber(fileCounter);
            tImg=Afi2TImg(afiFiles{fileCounter});
            tImgListRaw{fileCounter}=tImg;
            
            if(isCorrectionDesired)
                [bgInterp,shadeInterp]=Build_BG_Model(tImg);
                tImg=TissueImageCorrected(tImg,bgInterp,shadeInterp);
                tImg.intensityMultiplier(1)=dnaScaleFactors(fileCounter);
                tImgListClean{fileCounter}=tImg;
                
                [tumorMask,pixelRegion]=Identify_Tumor_Mask(tImg);
                tumorPixelRegions{fileCounter}=pixelRegion;
                tumorMaskCropped=tumorMask(pixelRegion{1}(1):pixelRegion{1}(2),...
                    pixelRegion{2}(1): pixelRegion{2}(2));
                tumorMasks{fileCounter}=tumorMaskCropped;
                img=tImg.LoadImage('MagLevel',3,'pixelRegion',pixelRegion);
                vimImg=img(:,:,4);vimImg=vimImg/max(vimImg(:));
                stromalMask=imbinarize(vimImg,adaptthresh(vimImg,0.5))&tumorMaskCropped;
                
                for markerCounter=1:numberOfMarkersPerSet
                    temp=img(:,:,markerCounter);
                    if(markerCounter==4)
                        pixelVals=temp(stromalMask);
                    else
                        pixelVals=temp(tumorMaskCropped);
                    end
                    pctileVals(fileCounter,markerCounter,:)=prctile(pixelVals,scalingPctiles);
                end
            end
        end
        rawImageList{markerSet,sampleNumber}=tImgListRaw;
        % denom=diff(pctileVals,1,3)';
        % mulFactor=bsxfun(@times,1./denom,diff(refPctileVals,1,2));
        % temp=reshape(refPctileVals',1,4,2);
        % offset=diff(bsxfun(@times, pctileVals,temp(:,:,[2,1])),1,3)';
        % offset=bsxfun(@times,1./denom,offset);
        if(isCorrectionDesired)
            refPctileVals=squeeze(mean(pctileVals,1));
            tImgListScaled=tImgListClean;
            for fileCounter=1:numberOfReplicates
                
                for markerCounter=1:numberOfMarkersPerSet
                    mulNumer=diff(refPctileVals(markerCounter,:));
                    addNumer=-diff(refPctileVals(markerCounter,:).*...
                        squeeze(pctileVals(fileCounter,markerCounter,[2,1]))');
                    denom=diff(pctileVals(fileCounter,markerCounter,:));
                    tImgListScaled{fileCounter}.intensityMultiplier(markerCounter)=(mulNumer/denom)*...
                        tImgListScaled{fileCounter}.intensityMultiplier(markerCounter);
                    tImgListScaled{fileCounter}.intensityOffset(markerCounter)=(addNumer/denom)+...
                        tImgListScaled{fileCounter}.intensityOffset(markerCounter);
                    
                end
                
            end
            scaledImageList{markerSet,sampleNumber}=tImgListScaled;
        end
    end
    
    if(isCorrectionDesired)
        save(params.microscopy.bgSubtractedImgList,'scaledImageList','sectionNumbers');
    else
        save(params.microscopy.rawImgList,'rawImageList','sectionNumbers');
    end
end
%%